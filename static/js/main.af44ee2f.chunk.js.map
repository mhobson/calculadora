{"version":3,"sources":["components/Button.jsx","components/Display.jsx","main/Calculator.jsx","serviceWorker.js","index.js"],"names":["props","classes","operation","double","triple","onClick","e","click","label","className","value","Calculator","clearMemory","bind","setOperation","addDigit","console","log","n","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mTAGe,G,YAAA,SAAAA,GACX,IAAIC,EAAU,UAKd,OAJAA,GAAWD,EAAME,UAAY,YAAc,GAC3CD,GAAWD,EAAMG,OAAS,SAAW,GACrCF,GAAWD,EAAMI,OAAS,SAAW,GAGjC,4BACIC,QAAS,SAAAC,GAAC,OAAIN,EAAMO,OAASP,EAAMO,MAAMP,EAAMQ,QAC/CC,UAAWR,GACND,EAAMQ,SCVR,G,MAAA,SAAAR,GAAK,OAChB,yBAAKS,UAAU,WAAWT,EAAMU,SCEfC,E,kDAEjB,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IAEDY,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBALD,E,0DASfG,QAAQC,IAAI,Y,mCAGHf,GACTc,QAAQC,IAAIf,K,+BAGPgB,GACLF,QAAQC,IAAIC,K,+BAKZ,OACI,yBAAKT,UAAU,cACX,kBAAC,EAAD,CAASC,MAAO,MAChB,kBAAC,EAAD,CAAQF,MAAM,KAAKD,MAAOY,KAAKP,YAAaR,QAAM,IAClD,kBAAC,EAAD,CAAQI,MAAM,IAAID,MAAOY,KAAKL,aAAcZ,WAAS,IACrD,kBAAC,EAAD,CAAQM,MAAM,IAAID,MAAOY,KAAKJ,WAC9B,kBAAC,EAAD,CAAQP,MAAM,IAAID,MAAOY,KAAKJ,WAC9B,kBAAC,EAAD,CAAQP,MAAM,IAAID,MAAOY,KAAKJ,WAC9B,kBAAC,EAAD,CAAQP,MAAM,IAAID,MAAOY,KAAKL,aAAcZ,WAAS,IACrD,kBAAC,EAAD,CAAQM,MAAM,IAAID,MAAOY,KAAKJ,WAC9B,kBAAC,EAAD,CAAQP,MAAM,IAAID,MAAOY,KAAKJ,WAC9B,kBAAC,EAAD,CAAQP,MAAM,IAAID,MAAOY,KAAKJ,WAC9B,kBAAC,EAAD,CAAQP,MAAM,IAAID,MAAOY,KAAKL,aAAcZ,WAAS,IACrD,kBAAC,EAAD,CAAQM,MAAM,IAAID,MAAOY,KAAKJ,WAC9B,kBAAC,EAAD,CAAQP,MAAM,IAAID,MAAOY,KAAKJ,WAC9B,kBAAC,EAAD,CAAQP,MAAM,IAAID,MAAOY,KAAKJ,WAC9B,kBAAC,EAAD,CAAQP,MAAM,IAAID,MAAOY,KAAKL,aAAcZ,WAAS,IACrD,kBAAC,EAAD,CAAQM,MAAM,IAAID,MAAOY,KAAKJ,SAAUZ,QAAM,IAC9C,kBAAC,EAAD,CAAQK,MAAM,IAAID,MAAOY,KAAKJ,WAC9B,kBAAC,EAAD,CAAQP,MAAM,IAAID,MAAOY,KAAKL,aAAcZ,WAAS,S,GA3C7BkB,aCMpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,SAAP,KACI,2CACA,kBAAC,EAAD,OAENC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.af44ee2f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nexport default props => {\r\n    let classes = 'button '\r\n    classes += props.operation ? 'operation' : ''\r\n    classes += props.double ? 'double' : ''\r\n    classes += props.triple ? 'triple' : ''\r\n    \r\n    return (\r\n        <button\r\n            onClick={e => props.click && props.click(props.label)}\r\n            className={classes}>\r\n                {props.label}\r\n        </button>\r\n    )\r\n}","import React from 'react'\r\nimport './Display.css'\r\n\r\nexport default props =>\r\n    <div className=\"display\">{props.value}</div>","import React, { Component } from 'react'\r\nimport './Calculator.css'\r\n\r\nimport Button from '../components/Button'\r\nimport Display from '../components/Display'\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.clearMemory = this.clearMemory.bind(this)\r\n        this.setOperation = this.setOperation.bind(this)\r\n        this.addDigit = this.addDigit.bind(this)\r\n    }\r\n\r\n    clearMemory() {\r\n        console.log('limpar')\r\n    }\r\n\r\n    setOperation(operation) {\r\n        console.log(operation)\r\n    }\r\n\r\n    addDigit(n) {\r\n        console.log(n)\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"calculator\">\r\n                <Display value={100} />\r\n                <Button label=\"AC\" click={this.clearMemory} triple />\r\n                <Button label=\"/\" click={this.setOperation} operation />\r\n                <Button label=\"7\" click={this.addDigit} />\r\n                <Button label=\"8\" click={this.addDigit} />\r\n                <Button label=\"9\" click={this.addDigit} />\r\n                <Button label=\"*\" click={this.setOperation} operation />\r\n                <Button label=\"4\" click={this.addDigit} />\r\n                <Button label=\"5\" click={this.addDigit} />\r\n                <Button label=\"6\" click={this.addDigit} />\r\n                <Button label=\"-\" click={this.setOperation} operation />\r\n                <Button label=\"1\" click={this.addDigit} />\r\n                <Button label=\"2\" click={this.addDigit} />\r\n                <Button label=\"3\" click={this.addDigit} />\r\n                <Button label=\"+\" click={this.setOperation} operation />\r\n                <Button label=\"0\" click={this.addDigit} double />\r\n                <Button label=\".\" click={this.addDigit} />\r\n                <Button label=\"=\" click={this.setOperation} operation />\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.Fragment>\n        <h1>Calculadora</h1>\n        <Calculator />\n    </React.Fragment>\n, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}